#include <string>
#include <unordered_map>
#include <unordered_set>
using namespace std;
class AllOne {
public:
    struct Node {
        int cnt;
        unordered_set<string> keys;
        Node* prev;
        Node* next;
        Node(int c): cnt(c), prev(nullptr), next(nullptr) {}
    };
    unordered_map<string, Node*> mp;
    Node* head;
    Node* tail;
    AllOne() {
        head = new Node(0);
        tail = new Node(0);
        head->next = tail;
        tail->prev = head;
    }
    ~AllOne() {
        Node* cur = head;
        while(cur) {
            Node* nxt = cur->next;
            delete cur;
            cur = nxt;
        }
    }
    void addNodeAfter(Node* node, Node* newNode) {
        newNode->next = node->next;
        newNode->prev = node;
        node->next->prev = newNode;
        node->next = newNode;
    }
    void removeNode(Node* node) {
        node->prev->next = node->next;
        node->next->prev = node->prev;
        delete node;
    }
    void inc(string key) {
        if(mp.find(key) == mp.end()){
            if(head->next == tail || head->next->cnt != 1){
                Node* node = new Node(1);
                addNodeAfter(head, node);
                node->keys.insert(key);
                mp[key] = node;
            } else {
                head->next->keys.insert(key);
                mp[key] = head->next;
            }
        } else {
            Node* cur = mp[key];
            int newCnt = cur->cnt + 1;
            Node* nextNode = cur->next;
            if(nextNode == tail || nextNode->cnt != newCnt){
                Node* node = new Node(newCnt);
                addNodeAfter(cur, node);
                node->keys.insert(key);
                mp[key] = node;
            } else {
                nextNode->keys.insert(key);
                mp[key] = nextNode;
            }
            cur->keys.erase(key);
            if(cur->keys.empty()){
                cur->prev->next = cur->next;
                cur->next->prev = cur->prev;
                delete cur;
            }
        }
    }
    void dec(string key) {
        Node* cur = mp[key];
        int newCnt = cur->cnt - 1;
        cur->keys.erase(key);
        if(newCnt == 0){
            mp.erase(key);
        } else {
            Node* prevNode = cur->prev;
            if(prevNode == head || prevNode->cnt != newCnt){
                Node* node = new Node(newCnt);
                node->prev = cur->prev;
                node->next = cur;
                cur->prev->next = node;
                cur->prev = node;
                node->keys.insert(key);
                mp[key] = node;
            } else {
                prevNode->keys.insert(key);
                mp[key] = prevNode;
            }
        }
        if(cur->keys.empty()){
            cur->prev->next = cur->next;
            cur->next->prev = cur->prev;
            delete cur;
        }
    }
    string getMaxKey() {
        if(tail->prev == head) return "";
        return *(tail->prev->keys.begin());
    }
    string getMinKey() {
        if(head->next == tail) return "";
        return *(head->next->keys.begin());
    }
};
