#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    vector<vector<int>> sortMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        int arr[10][10];
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                arr[i][j] = grid[i][j];
            }
        }
        
        diagonalSort(arr, n);
        vector<vector<int>> res(n, vector<int>(n));
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                res[i][j] = arr[i][j];
            }
        }
        return res;
    }
    void diagonalSort(int grid[][10], int n) {
        for (int d = -(n - 1); d < n; d++) {
            int temp[10];  
            int count = 0;
            int start_i, start_j;
            
            if (d >= 0) {
                start_i = d;
                start_j = 0;
            } else {
                start_i = 0;
                start_j = -d;
            }
            
            int i = start_i, j = start_j;
            while (i < n && j < n) {
                temp[count++] = grid[i][j];
                i++;
                j++;
            }
            
            if (d >= 0)
                sort(temp, temp + count, greater<int>());
            else
                sort(temp, temp + count);
            
            i = start_i, j = start_j;
            int index = 0;
            while (i < n && j < n) {
                grid[i][j] = temp[index++];
                i++;
                j++;
            }
        }
    }
};
