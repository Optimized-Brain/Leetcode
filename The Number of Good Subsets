class Solution {
public:
    int numberOfGoodSubsets(vector<int>& nums) {
        const int MOD = 1000000007;
        vector<int> cnt(31, 0);
        for (int n : nums) cnt[n]++;
        vector<int> primes = {2,3,5,7,11,13,17,19,23,29};
        vector<pair<int,int>> valid;
        for (int i = 2; i <= 30; i++) {
            if (!cnt[i]) continue;
            int mask = 0;
            bool ok = true;
            for (int j = 0; j < primes.size(); j++) {
                int p = primes[j];
                if (i % p == 0) {
                    int c = 0, x = i;
                    while (x % p == 0) { c++; x /= p; }
                    if (c > 1) { ok = false; break; }
                    mask |= (1 << j);
                }
            }
            if (ok) valid.push_back({mask, cnt[i]});
        }
        vector<long long> dp(1 << primes.size(), 0);
        dp[0] = 1;
        for (auto &p : valid) {
            int m = p.first, freq = p.second;
            for (int state = (1 << primes.size()) - 1; state >= 0; state--) {
                if (dp[state] && ((state & m) == 0))
                    dp[state | m] = (dp[state | m] + dp[state] * (long long)freq) % MOD;
            }
        }
        long long ans = 0;
        for (int state = 1; state < (1 << primes.size()); state++)
            ans = (ans + dp[state]) % MOD;
        long long ones = 1;
        for (int i = 0; i < cnt[1]; i++)
            ones = (ones * 2) % MOD;
        return (int)((ans * ones) % MOD);
    }
};
